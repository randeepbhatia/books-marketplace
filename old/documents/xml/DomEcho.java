package xml;

import javax.xml.parsers.DocumentBuilder; 
import javax.xml.parsers.DocumentBuilderFactory;  
import javax.xml.parsers.FactoryConfigurationError;  
import javax.xml.parsers.ParserConfigurationException;
 
import org.xml.sax.SAXException;  
import org.xml.sax.SAXParseException;  

import java.io.File;
import java.io.IOException;

import org.w3c.dom.Document;
import org.w3c.dom.DOMException;

public class DomEcho {
    // Global value so it can be ref'd by the tree-adapter
    static Document document; 

    public static void main(String argv[]) {
        if (argv.length != 1) {
            System.err.println("Usage: java DomEcho filename");
            System.exit(1);
        }
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setValidating(true);   
        //factory.setNamespaceAware(true);        
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            builder.setErrorHandler(
                new org.xml.sax.ErrorHandler() {
                    // ignore fatal errors (an exception is guaranteed)
                    public void fatalError(SAXParseException exception) throws SAXException { }
                    // treat validation errors as fatal
                    public void error(SAXParseException e) throws SAXParseException { throw e; }
                    // dump warnings too
                    public void warning(SAXParseException err) throws SAXParseException {
                        System.out.println("** Warning"
                        + ", line " + err.getLineNumber()
                        + ", uri " + err.getSystemId());
                        System.out.println("   " + err.getMessage());
                    }
            }
            );
            document = builder.parse( new File(argv[0]) );
        } catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println("\n** Parsing error"
            + ", line " + spe.getLineNumber()
            + ", uri " + spe.getSystemId());
            System.out.println("   " + spe.getMessage() );
            // Use the contained exception, if any
            Exception  x = spe;
            if (spe.getException() != null)
                x = spe.getException();
                x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated during parsing)
            Exception  x = sxe;
            if (sxe.getException() != null)
                x = sxe.getException();
                x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
    } // main
}
